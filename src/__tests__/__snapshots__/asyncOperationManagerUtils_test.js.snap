// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`asyncOperationManagerUtils getAsyncOperationDescriptor should successfully return a registered asyncOperationDescriptor: well formed async operation descriptor 1`] = `
Object {
  "alwaysImmutable": false,
  "debug": false,
  "descriptorId": "FETCH_PERSON_DATA_BY_ID",
  "invalidatingOperationsDescriptorIds": null,
  "maxCacheTime": 60000,
  "minCacheTime": 5000,
  "operationType": "READ",
  "parentAsyncOperation": "FETCH_ALL_PERSON_DATA",
  "parentOperationDescriptorId": null,
  "requiredParams": Array [
    "personId",
  ],
}
`;

exports[`asyncOperationManagerUtils getStateForOperationAfterStep READ async operations should update state to read show async operation as failed state from pending state: updated state showing rejected async operation 1`] = `
Object {
  "descriptors": Object {
    "FETCH_PERSON_DATA": Object {
      "alwaysImmutable": false,
      "debug": false,
      "descriptorId": "FETCH_PERSON_DATA",
      "invalidatingOperationsDescriptorIds": null,
      "maxCacheTime": 60000,
      "minCacheTime": 5000,
      "operationType": "READ",
      "parentOperationDescriptorId": null,
      "requiredParams": Array [
        "personId",
      ],
    },
  },
  "operations": Object {
    "FETCH_PERSON_DATA_111": Object {
      "dataStatus": "ABSENT",
      "descriptorId": "FETCH_PERSON_DATA",
      "fetchStatus": "FAILED",
      "lastDataStatusTime": 0,
      "lastFetchFailed": true,
      "lastFetchStatusTime": 1530518207007,
      "message": null,
      "personId": 111,
    },
  },
}
`;

exports[`asyncOperationManagerUtils getStateForOperationAfterStep READ async operations should update state to read show async operation as pending state from initial state: updated state showing begun read async operation 1`] = `
Object {
  "descriptors": Object {
    "FETCH_PERSON_DATA": Object {
      "alwaysImmutable": false,
      "debug": false,
      "descriptorId": "FETCH_PERSON_DATA",
      "invalidatingOperationsDescriptorIds": null,
      "maxCacheTime": 60000,
      "minCacheTime": 5000,
      "operationType": "READ",
      "parentOperationDescriptorId": null,
      "requiredParams": Array [
        "personId",
      ],
    },
  },
  "operations": Object {
    "FETCH_PERSON_DATA_111": Object {
      "dataStatus": "ABSENT",
      "descriptorId": "FETCH_PERSON_DATA",
      "fetchStatus": "PENDING",
      "lastDataStatusTime": 0,
      "lastFetchStatusTime": 1530518207007,
      "message": null,
      "personId": 111,
    },
  },
}
`;

exports[`asyncOperationManagerUtils getStateForOperationAfterStep READ async operations should update state to read show async operation as successful state from pending state: updated state showing successful read async operation 1`] = `
Object {
  "descriptors": Object {
    "FETCH_PERSON_DATA": Object {
      "alwaysImmutable": false,
      "debug": false,
      "descriptorId": "FETCH_PERSON_DATA",
      "invalidatingOperationsDescriptorIds": null,
      "maxCacheTime": 60000,
      "minCacheTime": 5000,
      "operationType": "READ",
      "parentOperationDescriptorId": null,
      "requiredParams": Array [
        "personId",
      ],
    },
  },
  "operations": Object {
    "FETCH_PERSON_DATA_111": Object {
      "dataStatus": "PRESENT",
      "descriptorId": "FETCH_PERSON_DATA",
      "fetchStatus": "SUCCESSFUL",
      "lastDataStatusTime": 1530518207007,
      "lastFetchFailed": false,
      "lastFetchStatusTime": 1530518207007,
      "message": null,
      "personId": 111,
    },
  },
}
`;

exports[`asyncOperationManagerUtils getStateForOperationAfterStep WRITE async operations should update state to show write async operation as failed state from pending state: updated state showing failed write async operation 1`] = `
Object {
  "descriptors": Object {
    "UPDATE_PERSON_DATA": Object {
      "alwaysImmutable": false,
      "debug": false,
      "descriptorId": "UPDATE_PERSON_DATA",
      "invalidatingOperationsDescriptorIds": null,
      "maxCacheTime": 60000,
      "minCacheTime": 5000,
      "operationType": "WRITE",
      "parentOperationDescriptorId": null,
      "requiredParams": Array [
        "personId",
      ],
    },
  },
  "operations": Object {
    "UPDATE_PERSON_DATA_111": Object {
      "descriptorId": "UPDATE_PERSON_DATA",
      "fetchStatus": "FAILED",
      "lastDataStatusTime": 0,
      "lastFetchStatusTime": 1530518207007,
      "message": null,
      "personId": 111,
    },
  },
}
`;

exports[`asyncOperationManagerUtils getStateForOperationAfterStep WRITE async operations should update state to show write async operation as pending state from initial state: updated state showing pending write async operation 1`] = `
Object {
  "descriptors": Object {
    "UPDATE_PERSON_DATA": Object {
      "alwaysImmutable": false,
      "debug": false,
      "descriptorId": "UPDATE_PERSON_DATA",
      "invalidatingOperationsDescriptorIds": null,
      "maxCacheTime": 60000,
      "minCacheTime": 5000,
      "operationType": "WRITE",
      "parentOperationDescriptorId": null,
      "requiredParams": Array [
        "personId",
      ],
    },
  },
  "operations": Object {
    "UPDATE_PERSON_DATA_111": Object {
      "descriptorId": "UPDATE_PERSON_DATA",
      "fetchStatus": "PENDING",
      "lastFetchStatusTime": 1530518207007,
      "message": null,
      "personId": 111,
    },
  },
}
`;

exports[`asyncOperationManagerUtils getStateForOperationAfterStep WRITE async operations should update state to show write async operation as successful state from pending state: updated state showing successful write async operation 1`] = `
Object {
  "descriptors": Object {
    "UPDATE_PERSON_DATA": Object {
      "alwaysImmutable": false,
      "debug": false,
      "descriptorId": "UPDATE_PERSON_DATA",
      "invalidatingOperationsDescriptorIds": null,
      "maxCacheTime": 60000,
      "minCacheTime": 5000,
      "operationType": "WRITE",
      "parentOperationDescriptorId": null,
      "requiredParams": Array [
        "personId",
      ],
    },
  },
  "operations": Object {
    "UPDATE_PERSON_DATA_111": Object {
      "descriptorId": "UPDATE_PERSON_DATA",
      "fetchStatus": "SUCCESSFUL",
      "lastDataStatusTime": 0,
      "lastFetchStatusTime": 1530518207007,
      "message": null,
      "personId": 111,
    },
  },
}
`;

exports[`asyncOperationManagerUtils getStateForOperationAfterStep should return an object containing only operations and descriptors keys: state with only operations and descriptors keys 1`] = `
Object {
  "descriptors": Object {
    "FETCH_PERSON_DATA": Object {
      "alwaysImmutable": false,
      "debug": false,
      "descriptorId": "FETCH_PERSON_DATA",
      "invalidatingOperationsDescriptorIds": null,
      "maxCacheTime": 60000,
      "minCacheTime": 5000,
      "operationType": "READ",
      "parentOperationDescriptorId": null,
      "requiredParams": Array [
        "personId",
      ],
    },
  },
  "operations": Object {
    "FETCH_PERSON_DATA_111": Object {
      "dataStatus": "ABSENT",
      "descriptorId": "FETCH_PERSON_DATA",
      "fetchStatus": "PENDING",
      "lastDataStatusTime": 0,
      "lastFetchStatusTime": 1530518207007,
      "message": null,
      "personId": 111,
    },
  },
}
`;
