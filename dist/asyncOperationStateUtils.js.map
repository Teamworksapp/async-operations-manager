{"version":3,"sources":["../src/asyncOperationStateUtils.js"],"names":["updateAsyncOperationDescriptor","state","descriptorOptions","asyncOperationDescriptor","debug","parentOperationDescriptorId","invalidatingOperationsDescriptorIds","alwaysImmutable","minCacheTime","maxCacheTime","requiredParams","PropTypes","checkPropTypes","asyncOperationDescriptorPropType","descriptors","descriptorId","getLatestOperationByDescriptorId","operations","acc","operation","lastFetchStatusTime","setInvalidatedOperationByKeyState","asyncOperationKey","operationType","ASYNC_OPERATION_TYPES","READ","getAsyncOperationFromState","asyncOperationParams","fieldsToAdd","parentAsyncOperation","asyncOperation","config","asyncOperationManagerConfig","getConfig","fieldsToAddToAction","logger","verboseLoggingCallback","infoLoggingCallback","parentAsyncOperationDescriptor","parentAsyncOperationKey","invalidateOperation","invalidatingAsyncOperationDescriptor","invalidatingOperation","fetchStatus","FETCH_STATUS","SUCCESSFUL","lastDataStatusTime","valueOf","readAsyncOperationFieldsToPullFromParent","updateAsyncOperation","asyncOperationPropType","bulkUpdateAsyncOperations","asyncOperationsList","accumulator"],"mappings":"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","sourcesContent":["\n// TODO: JSDocify every function\nimport { pick, forEach, reduce } from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport asyncOperationManagerConfig from './config';\n\nimport {\n  ASYNC_OPERATION_TYPES,\n  // ASYNC_OPERATION_STEPS,\n  FETCH_STATUS,\n  readAsyncOperationFieldsToPullFromParent,\n} from './constants';\n\nimport {\n  getAsyncOperationInfo,\n  getAsyncOperationDescriptor,\n} from './helpers';\n\nimport {\n  asyncOperationDescriptorPropType,\n  asyncOperationPropType,\n} from './types';\n\nimport {\n  initialReadAsyncOperationForAction,\n  initialWriteAsyncOperationForAction,\n} from './asyncOperationUtils';\n\n// // //\n// // // These are all pure functions that return new or existing state or\n// // // pieces of new or existing state from their inputs.\n// // //\n\nconst updateAsyncOperationDescriptor = (state, descriptorOptions) => {\n  const asyncOperationDescriptor = {\n    debug: false,\n    parentOperationDescriptorId: null,\n    invalidatingOperationsDescriptorIds: null,\n    alwaysImmutable: false,\n    minCacheTime: 5000,\n    maxCacheTime: 60000,\n    requiredParams: {},\n    ...descriptorOptions,\n  };\n\n  PropTypes.checkPropTypes(asyncOperationDescriptorPropType, asyncOperationDescriptor, 'prop', 'asyncOperationDescriptor');\n  \n  return {\n    ...state,\n    descriptors: {\n      ...state.descriptors,\n      [asyncOperationDescriptor.descriptorId]: asyncOperationDescriptor,\n    },\n  };\n};\n\nconst getLatestOperationByDescriptorId = (state, descriptorId) => {\n  return reduce(state.operations, (acc, operation) => {\n    if (operation.descriptorId === descriptorId) {\n      if (!acc) {\n        return operation;\n      }\n      if (acc.lastFetchStatusTime <= operation.lastFetchStatusTime) {\n        return operation;\n      }\n      return acc;\n    }\n  }, {});\n};\n\nconst setInvalidatedOperationByKeyState = (state, asyncOperationKey, descriptorId) => {\n  const asyncOperationDescriptor = state.descriptors[descriptorId];\n\n  return {\n    ...state,\n    operations: {\n      ...state.operations,\n      [asyncOperationKey]: asyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ\n        ? initialReadAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey)\n        : initialWriteAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey),\n    },\n  };\n};\n\n// This function will do all the work to determine if an async operation is returned as an initial async operation\n// (if it is not found in state), an asyncOperation with parentAsyncOperation metaData (recursively searched to find if the parentAsyncOperation is more\n// up-to-date) or just the asyncOperation itself if the none of the above apply.\nconst getAsyncOperationFromState = ({\n  state,\n  asyncOperationKey,\n  asyncOperationDescriptor,\n  asyncOperationParams,\n  fieldsToAdd,\n}) => {\n  const { operations, descriptors } = state;\n\n  let parentAsyncOperation;\n  const asyncOperation = operations[asyncOperationKey] || null;\n\n  const config = asyncOperationManagerConfig.getConfig();\n  const fieldsToAddToAction = {\n    ...asyncOperationParams,\n    ...fieldsToAdd,\n    // key for the descriptor of the asyncOperation\n    descriptorId: asyncOperationDescriptor.descriptorId,\n  };\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside getAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('getAsyncOperation [Data Snapshot]:', {\n      state,\n      asyncOperationParams,\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey,\n    });\n  }\n\n  if (asyncOperationDescriptor.parentOperationDescriptorId) {\n    // grab key, descriptor, params, and async operation for parentAsyncOperation\n    const {\n      asyncOperationDescriptor: parentAsyncOperationDescriptor,\n      asyncOperationKey: parentAsyncOperationKey,\n    } = getAsyncOperationInfo(descriptors, asyncOperationDescriptor.parentOperationDescriptorId, asyncOperationParams);\n\n    if (parentAsyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ) {\n      parentAsyncOperation = getAsyncOperationFromState({\n        state,\n        asyncOperationKey: parentAsyncOperationKey,\n        asyncOperationDescriptor: parentAsyncOperationDescriptor,\n        asyncOperationParams,\n        fieldsToAdd: fieldsToAddToAction,\n      });\n    }\n  }\n\n  if (!asyncOperation) {\n    if (asyncOperationDescriptor.debug) {\n      config.logger.verboseLoggingCallback(`asyncOperation not found with given key: ${asyncOperationKey}. Defaulting to an initial asyncOperation`);\n    }\n    return asyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ\n      ? initialReadAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey, fieldsToAddToAction, parentAsyncOperation)\n      : initialWriteAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey, fieldsToAddToAction, parentAsyncOperation);\n  }\n\n  if (asyncOperationDescriptor.invalidatingOperationsDescriptorIds) {\n    // we want to detect whether to invalidate the async operation if an async operation has been found\n    let invalidateOperation = false;\n\n    forEach(asyncOperationDescriptor.invalidatingOperationsDescriptorIds, (descriptorId) => {\n      // hanlde if an asyncOperation invalidates itself\n      if (descriptorId === asyncOperationDescriptor.descriptorId) {\n        invalidateOperation = true;\n        return false;\n      }\n\n      const invalidatingAsyncOperationDescriptor = getAsyncOperationDescriptor(descriptors, descriptorId);\n      const invalidatingOperation = getLatestOperationByDescriptorId(state, descriptorId);\n\n      if (invalidatingOperation.fetchStatus === FETCH_STATUS.SUCCESSFUL) {\n      // Handle invalidating operations with write or read operations.\n        invalidateOperation = invalidatingAsyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ ?\n          invalidatingOperation.lastDataStatusTime.valueOf() >= asyncOperation.lastDataStatusTime.valueOf() :\n          invalidatingOperation.lastFetchStatusTime.valueOf() >= asyncOperation.lastFetchStatusTime.valueOf();\n      }\n\n      if (invalidateOperation) {\n        return false;\n      }\n      return true;\n    });\n\n    if (invalidateOperation) {\n      return initialReadAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey, fieldsToAddToAction);\n    }\n  }\n\n  // We want to determine whether or not to use that parentAsyncOperation metaData based on the\n  // newness of it's data in comparison to the asyncOperation\n  if (parentAsyncOperation) {\n    return parentAsyncOperation.lastDataStatusTime.valueOf() >= asyncOperation.lastDataStatusTime.valueOf()\n      ? {\n        ...asyncOperation,\n        // use parent async operation metaData (lastDataStatusTime, lastFetchStatusTime. etc...)\n        ...pick(parentAsyncOperation, readAsyncOperationFieldsToPullFromParent),\n      }\n      : asyncOperation;\n  }\n\n  return asyncOperation;\n};\n\nconst updateAsyncOperation = (state, asyncOperationKey, asyncOperation, asyncOperationDescriptor) => {\n  const config = asyncOperationManagerConfig.getConfig();\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside updateAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('updateAsyncOperation [Data Snapshot]:', {\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey,\n    });\n  }\n\n  PropTypes.checkPropTypes(asyncOperationPropType, asyncOperation, 'prop', 'asyncOperation');\n\n  return {\n    operations: {\n      ...state.operations,\n      [asyncOperationKey]: asyncOperation,\n    },\n  };\n};\n\nconst bulkUpdateAsyncOperations = (state, asyncOperationsList) => {\n  return reduce(asyncOperationsList, (accumulator, { asyncOperationKey, asyncOperation, asyncOperationDescriptor }) => {\n    return updateAsyncOperation(accumulator, asyncOperationKey, asyncOperation, asyncOperationDescriptor);\n  }, state);\n};\n\nexport default {\n  updateAsyncOperationDescriptor,\n\n  updateAsyncOperation,\n  bulkUpdateAsyncOperations,\n\n  getAsyncOperationFromState,\n  getLatestOperationByDescriptorId,\n\n  setInvalidatedOperationByKeyState,\n};\n"],"file":"asyncOperationStateUtils.js"}