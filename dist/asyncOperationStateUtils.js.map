{"version":3,"sources":["../src/asyncOperationStateUtils.js"],"names":["updateAsyncOperationDescriptor","state","descriptorOptions","asyncOperationDescriptor","debug","parentOperationDescriptorId","invalidatingOperationsDescriptorIds","alwaysImmutable","minCacheTime","maxCacheTime","requiredParams","PropTypes","checkPropTypes","asyncOperationDescriptorPropType","descriptors","descriptorId","createInvalidatedOperationState","params","nonWildcardParams","param","WILDCARD","asyncOperationKey","invalidatedOperations","operations","acc","operation","paramMatchCount","invalidatedOperation","key","length","operationType","ASYNC_OPERATION_TYPES","READ","invalidatedOperationsState","getAsyncOperationFromState","asyncOperationParams","fieldsToAdd","parentAsyncOperation","asyncOperation","config","asyncOperationManagerConfig","getConfig","fieldsToAddToAction","logger","verboseLoggingCallback","infoLoggingCallback","parentAsyncOperationDescriptor","parentAsyncOperationKey","lastDataStatusTime","valueOf","readAsyncOperationFieldsToPullFromParent","updateAsyncOperation","asyncOperationPropType","updatedOperationsState","bulkUpdateAsyncOperations","asyncOperationsList","accumulator"],"mappings":"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","sourcesContent":["\n// TODO: JSDocify every function\nimport {\n  pick,\n  reduce,\n  omitBy,\n  includes,\n  forEach,\n  keys,\n} from 'lodash';\nimport PropTypes from 'prop-types';\n\nimport asyncOperationManagerConfig from './config';\n\nimport {\n  ASYNC_OPERATION_TYPES,\n  WILDCARD,\n  readAsyncOperationFieldsToPullFromParent,\n} from './constants';\n\nimport {\n  getAsyncOperationInfo,\n} from './helpers';\n\nimport {\n  asyncOperationDescriptorPropType,\n  asyncOperationPropType,\n} from './types';\n\nimport {\n  initialReadAsyncOperationForAction,\n  initialWriteAsyncOperationForAction,\n} from './asyncOperationUtils';\n\n// // //\n// // // These are all pure functions that return new or existing state or\n// // // pieces of new or existing state from their inputs.\n// // //\n\nconst updateAsyncOperationDescriptor = (state, descriptorOptions) => {\n  const asyncOperationDescriptor = {\n    debug: false,\n    parentOperationDescriptorId: null,\n    invalidatingOperationsDescriptorIds: null,\n    alwaysImmutable: false,\n    minCacheTime: 5000,\n    maxCacheTime: 60000,\n    requiredParams: {},\n    ...descriptorOptions,\n  };\n\n  PropTypes.checkPropTypes(asyncOperationDescriptorPropType, asyncOperationDescriptor, 'prop', 'asyncOperationDescriptor');\n  \n  return {\n    ...state,\n    descriptors: {\n      ...state.descriptors,\n      [asyncOperationDescriptor.descriptorId]: asyncOperationDescriptor,\n    },\n  };\n};\n\nconst createInvalidatedOperationState = (state, descriptorId, params) => {\n  const nonWildcardParams = omitBy(params, param => param === WILDCARD);\n\n  const {\n    asyncOperationDescriptor,\n    asyncOperationKey,\n  } = getAsyncOperationInfo(state.descriptors, descriptorId, params);\n\n\n  const invalidatedOperations = reduce(state.operations, (acc, operation) => {\n    let paramMatchCount = 0;\n    let invalidatedOperation;\n    forEach(nonWildcardParams, (param) => {\n      if (includes(operation.key, param)) {\n        paramMatchCount += 1;\n        if (paramMatchCount === keys(nonWildcardParams).length) {\n          invalidatedOperation = {\n            ...operation,\n            ...asyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ\n              ? initialReadAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey)\n              : initialWriteAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey),\n          };\n        }\n      }\n      return true;\n    });\n    return {\n      ...acc,\n      [operation.key]: invalidatedOperation,\n    };\n  }, {});\n\n  debugger;\n\n  const invalidatedOperationsState = {\n    ...state,\n    operations: {\n      ...state.operations,\n      ...invalidatedOperations,\n    },\n  };\n\n  return invalidatedOperationsState;\n};\n\n// This function will do all the work to determine if an async operation is returned as an initial async operation\n// (if it is not found in state), an asyncOperation with parentAsyncOperation metaData (recursively searched to find if the parentAsyncOperation is more\n// up-to-date) or just the asyncOperation itself if the none of the above apply.\nconst getAsyncOperationFromState = ({\n  state,\n  asyncOperationKey,\n  asyncOperationDescriptor,\n  asyncOperationParams,\n  fieldsToAdd,\n}) => {\n  const { operations, descriptors } = state;\n\n  let parentAsyncOperation;\n  const asyncOperation = operations[asyncOperationKey] || null;\n\n  const config = asyncOperationManagerConfig.getConfig();\n  const fieldsToAddToAction = {\n    ...asyncOperationParams,\n    ...fieldsToAdd,\n    // key for the descriptor of the asyncOperation\n    descriptorId: asyncOperationDescriptor.descriptorId,\n  };\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside getAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('getAsyncOperation [Data Snapshot]:', {\n      state,\n      asyncOperationParams,\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey,\n    });\n  }\n\n  if (asyncOperationDescriptor.parentOperationDescriptorId) {\n    // grab key, descriptor, params, and async operation for parentAsyncOperation\n    const {\n      asyncOperationDescriptor: parentAsyncOperationDescriptor,\n      asyncOperationKey: parentAsyncOperationKey,\n    } = getAsyncOperationInfo(descriptors, asyncOperationDescriptor.parentOperationDescriptorId, asyncOperationParams);\n\n    if (parentAsyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ) {\n      parentAsyncOperation = getAsyncOperationFromState({\n        state,\n        asyncOperationKey: parentAsyncOperationKey,\n        asyncOperationDescriptor: parentAsyncOperationDescriptor,\n        asyncOperationParams,\n        fieldsToAdd: fieldsToAddToAction,\n      });\n    }\n  }\n\n  if (!asyncOperation) {\n    if (asyncOperationDescriptor.debug) {\n      config.logger.verboseLoggingCallback(`asyncOperation not found with given key: ${asyncOperationKey}. Defaulting to an initial asyncOperation`);\n    }\n    return asyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ\n      ? initialReadAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey, fieldsToAddToAction, parentAsyncOperation)\n      : initialWriteAsyncOperationForAction(asyncOperationDescriptor.descriptorId, asyncOperationKey, fieldsToAddToAction, parentAsyncOperation);\n  }\n\n  // We want to determine whether or not to use that parentAsyncOperation metaData based on the\n  // newness of it's data in comparison to the asyncOperation\n  if (parentAsyncOperation) {\n    return parentAsyncOperation.lastDataStatusTime.valueOf() >= asyncOperation.lastDataStatusTime.valueOf()\n      ? {\n        ...asyncOperation,\n        // use parent async operation metaData (lastDataStatusTime, lastFetchStatusTime. etc...)\n        ...pick(parentAsyncOperation, readAsyncOperationFieldsToPullFromParent),\n      }\n      : asyncOperation;\n  }\n\n  return asyncOperation;\n};\n\nconst updateAsyncOperation = (state, asyncOperationKey, asyncOperation, asyncOperationDescriptor) => {\n  const config = asyncOperationManagerConfig.getConfig();\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(`Inside updateAsyncOperation for ${asyncOperationKey}`);\n    config.logger.infoLoggingCallback('updateAsyncOperation [Data Snapshot]:', {\n      asyncOperationDescriptor,\n      asyncOperation,\n      asyncOperationKey,\n    });\n  }\n\n  PropTypes.checkPropTypes(asyncOperationPropType, asyncOperation, 'prop', 'asyncOperation');\n\n  const updatedOperationsState = {\n    operations: {\n      ...state.operations,\n      [asyncOperationKey]: {\n        ...asyncOperation,\n        key: asyncOperationKey,\n      },\n    },\n  };\n\n  return updatedOperationsState;\n};\n\nconst bulkUpdateAsyncOperations = (state, asyncOperationsList) => {\n  return reduce(asyncOperationsList, (accumulator, { asyncOperationKey, asyncOperation, asyncOperationDescriptor }) => {\n    return updateAsyncOperation(accumulator, asyncOperationKey, asyncOperation, asyncOperationDescriptor);\n  }, state);\n};\n\nexport default {\n  updateAsyncOperationDescriptor,\n\n  updateAsyncOperation,\n  bulkUpdateAsyncOperations,\n\n  getAsyncOperationFromState,\n\n  createInvalidatedOperationState,\n};\n"],"file":"asyncOperationStateUtils.js"}