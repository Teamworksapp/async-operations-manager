{"version":3,"sources":["../../../src/reduxIntegration/__tests__/functional_tests.js"],"names":["describe","state","beforeEach","dateNowStub","jest","fn","global","Date","now","initialAction","beginAction","descriptorId","requiredParams","operationType","personId","it","resolveAction","initialActionState","to","deep","equal","beginActionState","operations","include","FETCH_PERSON_DATA_111","fetchStatus","dataStatus","message","lastFetchStatusTime","lastDataStatusTime","resolveActionState","FETCH_STATUS","SUCCESSFUL","DATA_STATUS","PRESENT","lastFetchFailed","rejectAction","PENDING","ABSENT","rejectActionState","FAILED","onResolve","orgId","initialFetchCalendarDataAction","beginFetchCalendarDataAction","resolveFetchCalendarDataAction","FETCH_CALENDAR_DATA_22","initialUpdateAppointmentDataAction","appointmentId","beginUpdateAppointmentDataAction","resolveUpdateAppointmentDataAction","UPDATE_APPOINTMENT_DATA_22_111","currentState","fetchCalendarDataAsyncOperation","be","an","matchSnapshot"],"mappings":"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","sourcesContent":["/* eslint-env jest */\nimport { expect } from 'chai';\n\nimport asyncOperationReducer from '../asyncOperationReducer';\n\nimport { FETCH_STATUS, DATA_STATUS } from '../../constants';\n\nimport {\n  createAsyncOperationInitialAction,\n  createAsyncOperationBeginAction,\n  createAsyncOperationResolveAction,\n  createAsyncOperationRejectAction,\n} from '../asyncOperationReduxUtils';\n\nimport {\n  clearAsyncOperationsManagerState,\n  getAsyncOperationsManagerState,\n  registerAsyncOperationDescriptors,\n  invalidateAsyncOperation,\n} from '../../asyncOperationManagerUtils';\n\ndescribe('functional tests', () => {\n  let state;\n\n  beforeEach(() => {\n    clearAsyncOperationsManagerState();\n    const dateNowStub = jest.fn(() => 1530518207007);\n    global.Date.now = dateNowStub;\n  });\n\n  describe('READ operation scenarios', () => {\n    let initialAction;\n    let beginAction;\n    beforeEach(() => {\n      state = {};\n      clearAsyncOperationsManagerState();\n      registerAsyncOperationDescriptors({\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n      });\n      initialAction = createAsyncOperationInitialAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n      beginAction = createAsyncOperationBeginAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n    });\n\n    it('should update a successful READ operation as expected from start to finish', () => {\n      state = getAsyncOperationsManagerState();\n      const resolveAction = createAsyncOperationResolveAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n\n      const initialActionState = asyncOperationReducer(state, initialAction);\n      expect(initialActionState).to.deep.equal(state);\n\n      const beginActionState = asyncOperationReducer(state, beginAction);\n      expect(beginActionState.operations).to.deep.include({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: 'PENDING',\n          dataStatus: 'ABSENT',\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n        },\n      });\n\n      const resolveActionState = asyncOperationReducer(state, resolveAction);\n      expect(resolveActionState.operations).to.deep.include({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.SUCCESSFUL,\n          dataStatus: DATA_STATUS.PRESENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 1530518207007,\n          lastFetchFailed: false,\n          personId: 111,\n        },\n      });\n    });\n\n    it('should update a failed READ operation as expected from start to finish', () => {\n      const rejectAction = createAsyncOperationRejectAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n\n      const initialActionState = asyncOperationReducer(state, initialAction);\n      expect(initialActionState).to.deep.equal(state);\n\n      const beginActionState = asyncOperationReducer(state, beginAction);\n      expect(beginActionState.operations).to.deep.include({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.PENDING,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n        },\n      });\n\n      const rejectActionState = asyncOperationReducer(state, rejectAction);\n      expect(rejectActionState.operations).to.deep.include({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.FAILED,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          lastFetchFailed: true,\n          personId: 111,\n        },\n      });\n    });\n  });\n\n  describe('Invalidate operations', () => {\n    beforeEach(() => {\n      state = {};\n      clearAsyncOperationsManagerState();\n    });\n\n    it('should invalidate async operation if another operation descriptor\\'s onResolve invalidates it', () => {\n      registerAsyncOperationDescriptors([\n        {\n          descriptorId: 'UPDATE_APPOINTMENT_DATA',\n          requiredParams: ['orgId', 'appointmentId'],\n          operationType: 'WRITE',\n          onResolve: ({ orgId }) => {\n            invalidateAsyncOperation('FETCH_CALENDAR_DATA', { orgId });\n          },\n        },\n        {\n          descriptorId: 'FETCH_CALENDAR_DATA',\n          requiredParams: ['orgId'],\n          operationType: 'READ',\n        },\n      ]);\n\n      const initialFetchCalendarDataAction = createAsyncOperationInitialAction('FETCH_CALENDAR_DATA', {\n        orgId: 22,\n      });\n      const beginFetchCalendarDataAction = createAsyncOperationBeginAction('FETCH_CALENDAR_DATA', {\n        orgId: 22,\n      });\n      const resolveFetchCalendarDataAction = createAsyncOperationResolveAction('FETCH_CALENDAR_DATA', {\n        orgId: 22,\n      });\n\n      expect(asyncOperationReducer(state, initialFetchCalendarDataAction)).to.deep.equal(state);\n\n      expect(asyncOperationReducer(state, beginFetchCalendarDataAction).operations).to.deep.include({\n        FETCH_CALENDAR_DATA_22: {\n          descriptorId: 'FETCH_CALENDAR_DATA',\n          fetchStatus: FETCH_STATUS.PENDING,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          orgId: 22,\n        },\n      });\n\n      expect(asyncOperationReducer(state, resolveFetchCalendarDataAction).operations).to.deep.include({\n        FETCH_CALENDAR_DATA_22: {\n          descriptorId: 'FETCH_CALENDAR_DATA',\n          fetchStatus: 'SUCCESSFUL',\n          dataStatus: 'PRESENT',\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 1530518207007,\n          lastFetchFailed: false,\n          orgId: 22,\n        },\n      });\n\n      const dateNowStub = jest.fn(() => 1540000000000);\n      global.Date.now = dateNowStub;\n\n      const initialUpdateAppointmentDataAction = createAsyncOperationInitialAction('UPDATE_APPOINTMENT_DATA', {\n        orgId: 22,\n        appointmentId: 111,\n      });\n      const beginUpdateAppointmentDataAction = createAsyncOperationBeginAction('UPDATE_APPOINTMENT_DATA', {\n        orgId: 22,\n        appointmentId: 111,\n      });\n      const resolveUpdateAppointmentDataAction = createAsyncOperationResolveAction('UPDATE_APPOINTMENT_DATA', {\n        orgId: 22,\n        appointmentId: 111,\n      });\n\n      expect(asyncOperationReducer(state, initialUpdateAppointmentDataAction)).to.deep.equal(state);\n      expect(asyncOperationReducer(state, beginUpdateAppointmentDataAction).operations).to.deep.include({\n        UPDATE_APPOINTMENT_DATA_22_111: {\n          fetchStatus: FETCH_STATUS.PENDING,\n          message: null,\n          lastFetchStatusTime: 1540000000000,\n          descriptorId: 'UPDATE_APPOINTMENT_DATA',\n          orgId: 22,\n          appointmentId: 111,\n        },\n      });\n\n      expect(asyncOperationReducer(state, resolveUpdateAppointmentDataAction).operations).to.deep.include({\n        UPDATE_APPOINTMENT_DATA_22_111: {\n          fetchStatus: 'SUCCESSFUL',\n          message: null,\n          lastFetchStatusTime: 1540000000000,\n          descriptorId: 'UPDATE_APPOINTMENT_DATA',\n          orgId: 22,\n          appointmentId: 111,\n        },\n      });\n\n      const currentState = getAsyncOperationsManagerState();\n\n\n      const fetchCalendarDataAsyncOperation = currentState.operations.FETCH_CALENDAR_DATA_22;\n\n      expect(fetchCalendarDataAsyncOperation).to.be.an('object');\n      expect(fetchCalendarDataAsyncOperation).to.deep.include({\n        lastFetchStatusTime: 0,\n        lastDataStatusTime: 0,\n      });\n      expect(fetchCalendarDataAsyncOperation).to.matchSnapshot('Invalidated read fetchCalendarDataAsyncOperation');\n    });\n  });\n\n  describe('WRITE operation scenarios', () => {\n    beforeEach(() => {\n      state = {};\n      clearAsyncOperationsManagerState();\n    });\n  });\n});\n"],"file":"functional_tests.js"}