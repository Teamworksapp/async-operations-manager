{"version":3,"sources":["../../../src/reduxIntegration/__tests__/functional_tests.js"],"names":["describe","state","beforeEach","dateNowStub","jest","fn","global","Date","now","initialAction","beginAction","descriptorId","requiredParams","operationType","personId","it","resolveAction","to","deep","equal","operations","FETCH_PERSON_DATA_111","fetchStatus","FETCH_STATUS","PENDING","dataStatus","DATA_STATUS","ABSENT","message","lastFetchStatusTime","lastDataStatusTime","SUCCESSFUL","PRESENT","lastFetchFailed","only","rejectAction","include","FAILED"],"mappings":"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","sourcesContent":["/* eslint-env jest */\nimport { expect } from 'chai';\n\nimport asyncOperationReducer from '../asyncOperationReducer';\n\nimport { FETCH_STATUS, DATA_STATUS } from '../../constants';\n\nimport {\n  createAsyncOperationInitialAction,\n  createAsyncOperationBeginAction,\n  createAsyncOperationResolveAction,\n  createAsyncOperationRejectAction,\n} from '../asyncOperationReduxUtils';\n\nimport {\n  clearAsyncOperationsManagerState,\n  registerAsyncOperationDescriptors,\n} from '../../asyncOperationManagerUtils';\n\ndescribe('scenario tests', () => {\n  let state;\n\n  beforeEach(() => {\n    clearAsyncOperationsManagerState();\n    const dateNowStub = jest.fn(() => 1530518207007);\n    global.Date.now = dateNowStub;\n  });\n\n  describe('READ operation scenarios', () => {\n    let initialAction;\n    let beginAction;\n    beforeEach(() => {\n      state = {};\n      clearAsyncOperationsManagerState();\n      registerAsyncOperationDescriptors({\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n      });\n      initialAction = createAsyncOperationInitialAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n      beginAction = createAsyncOperationBeginAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n    });\n\n    it('should update a successful READ operation as expected from start to finish', () => {\n      const resolveAction = createAsyncOperationResolveAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n\n      expect(asyncOperationReducer(state, initialAction)).to.deep.equal(state);\n      expect(asyncOperationReducer(state, beginAction).operations).to.deep.equal({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.PENDING,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n        },\n      });\n      expect(asyncOperationReducer(state, resolveAction).operations).to.deep.equal({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.SUCCESSFUL,\n          dataStatus: DATA_STATUS.PRESENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 1530518207007,\n          personId: 111,\n          lastFetchFailed: false,\n        },\n      });\n    });\n\n    it.only('should update a failed READ operation as expected from start to finish', () => {\n      const rejectAction = createAsyncOperationRejectAction('FETCH_PERSON_DATA', {\n        personId: 111,\n      });\n\n      expect(asyncOperationReducer(state, initialAction)).to.deep.equal(state);\n      expect(asyncOperationReducer(state, beginAction).operations).to.deep.include({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.PENDING,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n        },\n      });\n      expect(asyncOperationReducer(state, rejectAction).operations).to.deep.include({\n        FETCH_PERSON_DATA_111: {\n          descriptorId: 'FETCH_PERSON_DATA',\n          fetchStatus: FETCH_STATUS.FAILED,\n          dataStatus: DATA_STATUS.ABSENT,\n          message: null,\n          lastFetchStatusTime: 1530518207007,\n          lastDataStatusTime: 0,\n          personId: 111,\n          lastFetchFailed: true,\n        },\n      });\n    });\n  });\n\n  describe('WRITE operation scenarios', () => {\n    beforeEach(() => {\n      state = {};\n      clearAsyncOperationsManagerState();\n    });\n  });\n});\n"],"file":"functional_tests.js"}