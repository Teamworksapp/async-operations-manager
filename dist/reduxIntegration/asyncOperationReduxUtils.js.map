{"version":3,"sources":["../../src/reduxIntegration/asyncOperationReduxUtils.js"],"names":["pullParamsAndKeyFromAction","descriptorId","action","state","descriptors","params","asyncOperationParams","key","asyncOperationKey","actionWithoutParams","createAsyncOperationInitialAction","initialAsyncOperationAction","type","createAsyncOperationBeginAction","operationStep","ASYNC_OPERATION_STEPS","BEGIN_ASYNC_OPERATION","createAsyncOperationResolveAction","RESOLVE_ASYNC_OPERATION","createAsyncOperationRejectAction","REJECT_ASYNC_OPERATION","getAsyncOperationResolveActionType","getActionForAsyncOperation","operation","extraParams","fetchStatus","dataStatus","message","lastFetchStatusTime","lastDataStatusTime","otherProps","console","warn"],"mappings":"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","sourcesContent":["// TODO: JSDocify every function\n\nimport {\n  omit,\n  keys,\n} from 'lodash';\n\nimport {\n  ASYNC_OPERATION_STEPS,\n} from '../constants';\n\nimport {\n  getAsyncOperationInfo,\n} from '../helpers';\n\nimport {\n  getAsyncOperationsManagerState,\n} from '../asyncOperationManagerUtils';\n\nconst pullParamsAndKeyFromAction = (descriptorId, action) => {\n  const state = getAsyncOperationsManagerState();\n  const {\n    asyncOperationParams: params,\n    asyncOperationKey: key,\n  } = getAsyncOperationInfo(state.descriptors, descriptorId, action);\n\n  const actionWithoutParams = omit(action, keys(params));\n\n  return {\n    actionWithoutParams,\n    params,\n    key,\n  };\n};\n\nconst createAsyncOperationInitialAction = (descriptorId, action) => {\n  const {\n    actionWithoutParams,\n    params,\n    key,\n  } = pullParamsAndKeyFromAction(descriptorId, action);\n\n  const initialAsyncOperationAction = {\n    ...actionWithoutParams,\n    type: descriptorId,\n    descriptorId,\n    params,\n    key,\n  };\n\n  return initialAsyncOperationAction;\n};\n\nconst createAsyncOperationBeginAction = (descriptorId, action) => {\n  const {\n    actionWithoutParams,\n    params,\n    key,\n  } = pullParamsAndKeyFromAction(descriptorId, action);\n\n  return {\n    ...actionWithoutParams,\n    descriptorId,\n    operationStep: ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION,\n    type: `AOM//BEGIN__${descriptorId}`,\n    params,\n    key,\n  };\n};\n\nconst createAsyncOperationResolveAction = (descriptorId, action) => {\n  const {\n    actionWithoutParams,\n    params,\n    key,\n  } = pullParamsAndKeyFromAction(descriptorId, action);\n\n  return {\n    ...actionWithoutParams,\n    descriptorId,\n    operationStep: ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION,\n    type: `AOM//RESOLVE__${descriptorId}`,\n    params,\n    key,\n  };\n};\n\nconst createAsyncOperationRejectAction = (descriptorId, action) => {\n  const {\n    actionWithoutParams,\n    params,\n    key,\n  } = pullParamsAndKeyFromAction(descriptorId, action);\n\n  return {\n    ...actionWithoutParams,\n    descriptorId,\n    operationStep: ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION,\n    type: `AOM//REJECT__${descriptorId}`,\n    params,\n    key,\n  };\n};\n\nconst getAsyncOperationResolveActionType = descriptorId => `AOM//RESOLVE__${descriptorId}`;\n\nconst getActionForAsyncOperation = (\n  operation,\n  extraParams = {},\n) => {\n  // We're going to pull out all the fields we recognize -- for both Read and Write operations --\n  // and anything left over is assumed to be part of the action (i.e., any necessary IDs or params)\n  const {\n    fetchStatus,\n    dataStatus,\n    message,\n    lastFetchStatusTime,\n    lastDataStatusTime,\n    descriptorId,\n    ...otherProps\n  } = operation;\n\n  if (!descriptorId) {\n    console.warn('AsyncOperation needs to include descriptorId so that we can re-dispatch it.', operation);\n  }\n\n  return {\n    type: descriptorId,\n    ...otherProps,\n    ...extraParams,\n  };\n};\n\nexport {\n  createAsyncOperationInitialAction,\n  createAsyncOperationBeginAction,\n  createAsyncOperationResolveAction,\n  createAsyncOperationRejectAction,\n  getAsyncOperationResolveActionType,\n  getActionForAsyncOperation,\n};\n"],"file":"asyncOperationReduxUtils.js"}