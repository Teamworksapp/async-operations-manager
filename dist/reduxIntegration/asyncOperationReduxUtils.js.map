{"version":3,"sources":["../../src/reduxIntegration/asyncOperationReduxUtils.js"],"names":["createAsyncOperationInitialAction","descriptorId","action","initialAsyncOperationAction","type","createAsyncOperationBeginAction","operationStep","ASYNC_OPERATION_STEPS","BEGIN_ASYNC_OPERATION","createAsyncOperationResolveAction","RESOLVE_ASYNC_OPERATION","createAsyncOperationRejectAction","REJECT_ASYNC_OPERATION","getAsyncOperationResolveActionType","getActionForAsyncOperation","operation","extraParams","fetchStatus","dataStatus","message","lastFetchStatusTime","lastDataStatusTime","otherProps","console","warn"],"mappings":";;;;;;;AACA;;;;;;;;;;AAIA,IAAMA,iCAAiC,GAAG,SAApCA,iCAAoC,CAACC,YAAD,EAAeC,MAAf,EAA0B;AAClE,MAAMC,2BAA2B,qBAC5BD,MAD4B;AAE/BE,IAAAA,IAAI,EAAEH,YAFyB;AAG/BA,IAAAA,YAAY,EAAZA;AAH+B,IAAjC;;AAMA,SAAOE,2BAAP;AACD,CARD;;;;AAUA,IAAME,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACJ,YAAD,EAAeC,MAAf,EAA0B;AAChE,2BACKA,MADL;AAEED,IAAAA,YAAY,EAAZA,YAFF;AAGEK,IAAAA,aAAa,EAAEC,iCAAsBC,qBAHvC;AAIEJ,IAAAA,IAAI,wBAAiBH,YAAjB;AAJN;AAMD,CAPD;;;;AASA,IAAMQ,iCAAiC,GAAG,SAApCA,iCAAoC,CAACR,YAAD,EAAeC,MAAf,EAA0B;AAClE,2BACKA,MADL;AAEED,IAAAA,YAAY,EAAZA,YAFF;AAGEK,IAAAA,aAAa,EAAEC,iCAAsBG,uBAHvC;AAIEN,IAAAA,IAAI,0BAAmBH,YAAnB;AAJN;AAMD,CAPD;;;;AASA,IAAMU,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACV,YAAD,EAAeC,MAAf,EAA0B;AACjE,2BACKA,MADL;AAEED,IAAAA,YAAY,EAAZA,YAFF;AAGEK,IAAAA,aAAa,EAAEC,iCAAsBK,sBAHvC;AAIER,IAAAA,IAAI,yBAAkBH,YAAlB;AAJN;AAMD,CAPD;;;;AASA,IAAMY,kCAAkC,GAAG,SAArCA,kCAAqC,CAAAZ,YAAY;AAAA,iCAAqBA,YAArB;AAAA,CAAvD;;;;AAEA,IAAMa,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,SADiC,EAG9B;AAAA,MADHC,WACG,uEADW,EACX;;AACH;AACA;AAFG,MAIDC,WAJC,GAWCF,SAXD,CAIDE,WAJC;AAAA,MAKDC,UALC,GAWCH,SAXD,CAKDG,UALC;AAAA,MAMDC,OANC,GAWCJ,SAXD,CAMDI,OANC;AAAA,MAODC,mBAPC,GAWCL,SAXD,CAODK,mBAPC;AAAA,MAQDC,kBARC,GAWCN,SAXD,CAQDM,kBARC;AAAA,MASDpB,YATC,GAWCc,SAXD,CASDd,YATC;AAAA,MAUEqB,UAVF,4BAWCP,SAXD;;AAaH,MAAI,CAACd,YAAL,EAAmB;AACjBsB,IAAAA,OAAO,CAACC,IAAR,CAAa,6EAAb,EAA4FT,SAA5F;AACD;;AAED;AACEX,IAAAA,IAAI,EAAEH;AADR,KAEKqB,UAFL,EAGKN,WAHL;AAKD,CAzBD","sourcesContent":["\nimport {\n  ASYNC_OPERATION_STEPS,\n} from '../constants';\n\nconst createAsyncOperationInitialAction = (descriptorId, action) => {\n  const initialAsyncOperationAction = {\n    ...action,\n    type: descriptorId,\n    descriptorId,\n  };\n\n  return initialAsyncOperationAction;\n};\n\nconst createAsyncOperationBeginAction = (descriptorId, action) => {\n  return {\n    ...action,\n    descriptorId,\n    operationStep: ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION,\n    type: `AOM//BEGIN__${descriptorId}`,\n  };\n};\n\nconst createAsyncOperationResolveAction = (descriptorId, action) => {\n  return {\n    ...action,\n    descriptorId,\n    operationStep: ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION,\n    type: `AOM//RESOLVE__${descriptorId}`,\n  };\n};\n\nconst createAsyncOperationRejectAction = (descriptorId, action) => {\n  return {\n    ...action,\n    descriptorId,\n    operationStep: ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION,\n    type: `AOM//REJECT__${descriptorId}`,\n  };\n};\n\nconst getAsyncOperationResolveActionType = descriptorId => `AOM//RESOLVE__${descriptorId}`;\n\nconst getActionForAsyncOperation = (\n  operation,\n  extraParams = {},\n) => {\n  // We're going to pull out all the fields we recognize -- for both Read and Write operations --\n  // and anything left over is assumed to be part of the action (i.e., any necessary IDs or params)\n  const {\n    fetchStatus,\n    dataStatus,\n    message,\n    lastFetchStatusTime,\n    lastDataStatusTime,\n    descriptorId,\n    ...otherProps\n  } = operation;\n\n  if (!descriptorId) {\n    console.warn('AsyncOperation needs to include descriptorId so that we can re-dispatch it.', operation);\n  }\n\n  return {\n    type: descriptorId,\n    ...otherProps,\n    ...extraParams,\n  };\n};\n\nexport {\n  createAsyncOperationInitialAction,\n  createAsyncOperationBeginAction,\n  createAsyncOperationResolveAction,\n  createAsyncOperationRejectAction,\n  getAsyncOperationResolveActionType,\n  getActionForAsyncOperation,\n};\n"],"file":"asyncOperationReduxUtils.js"}