{"version":3,"sources":["../../src/__tests__/asyncOperationStateUtils_test.js"],"names":["initialState","descriptors","operations","describe","stub","state","beforeEach","asyncOperationManagerState","clearState","sinon","console","afterEach","restore","it","asyncOperationDescriptor","descriptorId","requiredParams","operationType","debug","alwaysImmutable","minCacheTime","maxCacheTime","asyncOperationStateUtils","updateAsyncOperationDescriptor","to","matchSnapshot","UPDATE_PERSON_DATA","deep","include","parentOperationDescriptorId","callCount","equal","newAsyncOperation","fetchStatus","message","lastFetchStatusTime","lastDataStatusTime","personId","updateAsyncOperation","have","all","keys","asyncOperationUpdates","asyncOperation","dataStatus","asyncOperationKey","teamId","bulkUpdateAsyncOperations","getAsyncOperation","asyncOperationParams","FETCH_PERSON_DATA_111","asyncOperationStep","ASYNC_OPERATION_STEPS","BEGIN_ASYNC_OPERATION","be","an","RESOLVE_ASYNC_OPERATION","FETCH_ALL_PERSON_DATA","FETCH_ALL_PERSON_DATA_FOR_ORG_22","orgId","FETCH_ALL_DATA_FOR_ORG_22","FETCH_ALL_PERSON_DATA_FOR_ORG","FETCH_ALL_DATA_FOR_ORG","FETCH_APPOINTMENT_DATA_111","appointmentId","FETCH_APPOINTMENT_DATA_222","FETCH_APPOINTMENT_DATA","invalidatingOperationsDescriptorIds","FETCH_CALENDAR_DATA_33","UPDATE_APPOINTMENT_DATA_222","UPDATE_APPOINTMENT_DATA","FETCH_CALENDAR_DATA"],"mappings":"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","sourcesContent":["/* eslint-env jest */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nimport asyncOperationStateUtils from '../asyncOperationStateUtils';\nimport { asyncOperationManagerState } from '../asyncOperationManagerState';\nimport { ASYNC_OPERATION_STEPS } from '../constants';\n\nconst initialState = {\n  descriptors: {},\n  operations: {},\n};\n\ndescribe('asyncOperationStateUtils', () => {\n  describe('updateAsyncOperationDescriptor', () => {\n    let stub;\n    let state;\n\n    beforeEach(() => {\n      asyncOperationManagerState.clearState();\n      state = initialState;\n      stub = sinon.stub(console, 'error');\n    });\n\n    afterEach(() => {\n      stub.restore();\n    });\n\n    it('should update state with an asyncOperationDescriptor', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n        // optional values\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000,\n      };\n\n      const { descriptors } = asyncOperationStateUtils.updateAsyncOperationDescriptor(state, asyncOperationDescriptor);\n      expect(descriptors).to.matchSnapshot('state with well formed asyncOperationDescriptor');\n    });\n\n    it('should update state with an asyncOperationDescriptor and default optional values', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n      };\n\n      const { descriptors } = asyncOperationStateUtils.updateAsyncOperationDescriptor(state, asyncOperationDescriptor);\n      expect(descriptors.UPDATE_PERSON_DATA).to.deep.include({\n        parentOperationDescriptorId: null,\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000,\n      });\n    });\n\n    it('should throw an error if required descriptorId prop is not passed', () => {\n      const asyncOperationDescriptor = {\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n        // optional values\n        debug: false,\n        alwaysImmutable: false,\n        minCacheTime: 5000,\n        maxCacheTime: 60000,\n      };\n\n      asyncOperationStateUtils.updateAsyncOperationDescriptor(state, asyncOperationDescriptor);\n      expect(stub.callCount).to.equal(1);\n    });\n  });\n\n  describe('updateAsyncOperation', () => {\n    let state;\n    beforeEach(() => {\n      asyncOperationManagerState.clearState();\n      state = initialState;\n    });\n\n    it('should update state with an asyncOperation', () => {\n      const newAsyncOperation = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        fetchStatus: 'SUCCESSFUL',\n        message: null,\n        lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n        lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n        personId: 111,\n      };\n\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n      };\n\n      const { operations } = asyncOperationStateUtils.updateAsyncOperation(state, 'UPDATE_PERSON_DATA_111', newAsyncOperation, asyncOperationDescriptor);\n      expect(operations).to.have.all.keys('UPDATE_PERSON_DATA_111');\n      expect(operations).to.matchSnapshot('state with well formed asyncOperation');\n    });\n  });\n\n  describe('bulkUpdateAsyncOperations', () => {\n    let state;\n    beforeEach(() => {\n      asyncOperationManagerState.clearState();\n      state = initialState;\n    });\n\n    it('should update state with multiple async operations', () => {\n      const asyncOperationUpdates = [\n        {\n          asyncOperation: {\n            descriptorId: 'UPDATE_PERSON_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n            lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n            personId: 111,\n          },\n          asyncOperationKey: 'UPDATE_PERSON_DATA_111',\n          asyncOperationDescriptor: {\n            descriptorId: 'UPDATE_PERSON_DATA',\n            requiredParams: ['personId'],\n            operationType: 'WRITE',\n          },\n        },\n        {\n          asyncOperation: {\n            descriptorId: 'UPDATE_TEAM_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-10-01T19:12:26.189Z',\n            lastDataStatusTime: '2018-10-01T19:12:27.189Z',\n            teamId: 2,\n          },\n          asyncOperationKey: 'UPDATE_TEAM_DATA_2',\n          asyncOperationDescriptor: {\n            descriptorId: 'UPDATE_TEAM_DATA',\n            requiredParams: ['teamId'],\n            operationType: 'WRITE',\n          },\n        },\n      ];\n\n      const { operations } = asyncOperationStateUtils.bulkUpdateAsyncOperations(state, asyncOperationUpdates);\n      expect(operations).to.have.all.keys('UPDATE_PERSON_DATA_111', 'UPDATE_TEAM_DATA_2');\n      expect(operations).to.matchSnapshot('state with multiple asyncOperations');\n    });\n  });\n\n  describe('getAsyncOperation', () => {\n    let state;\n    beforeEach(() => {\n      state = initialState;\n      asyncOperationManagerState.clearState();\n    });\n\n    it('should return an initial read asyncOperation', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationKey: 'FETCH_PERSON_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { personId: 111 },\n      });\n\n      expect(asyncOperation).to.deep.include({\n        fetchStatus: 'NULL',\n        dataStatus: 'ABSENT',\n        lastFetchStatusTime: 0,\n        lastDataStatusTime: 0,\n      });\n      expect(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');\n    });\n\n    it('should return an initial write asyncOperation', () => {\n      const asyncOperationDescriptor = {\n        descriptorId: 'UPDATE_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'WRITE',\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationKey: 'UPDATE_PERSON_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { personId: 111 },\n      });\n\n      expect(asyncOperation).to.deep.include({\n        fetchStatus: 'NULL',\n        lastFetchStatusTime: 0,\n      });\n      expect(asyncOperation).to.matchSnapshot('well formed initial asyncOperation');\n    });\n\n    it('should return a pending asyncOperation', () => {\n      state = {\n        operations: {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'PENDING',\n            dataStatus: 'ABSENT',\n            message: null,\n            lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n            lastDataStatusTime: '2018-10-01T19:12:13.189Z',\n            personId: 111,\n          },\n        },\n      };\n\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationStep: ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION,\n        asyncOperationKey: 'FETCH_PERSON_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { personId: 111 },\n      });\n\n      expect(asyncOperation).to.be.an('object');\n      expect(asyncOperation).to.matchSnapshot('well formed pending asyncOperation');\n    });\n\n    it('should return a successful asyncOperation', () => {\n      state = {\n        operations: {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n            lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n            personId: 111,\n          },\n        },\n      };\n\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationStep: ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION,\n        asyncOperationKey: 'FETCH_PERSON_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { personId: 111 },\n      });\n\n      expect(asyncOperation).to.be.an('object');\n      expect(asyncOperation).to.matchSnapshot('well formed successful asyncOperation');\n    });\n\n    it('should return a successful asyncOperation with parentAsyncOperation metaData', () => {\n      state = {\n        operations: {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-10-01T19:12:46.189Z',\n            lastDataStatusTime: '2018-10-01T19:12:53.189Z',\n            personId: 111,\n          },\n          FETCH_ALL_PERSON_DATA: {\n            descriptorId: 'FETCH_ALL_PERSON_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-10-01T19:13:52.189Z',\n            lastDataStatusTime: '2018-10-01T19:13:56.189Z',\n          },\n        },\n        descriptors: {\n          FETCH_ALL_PERSON_DATA: {\n            descriptorId: 'FETCH_ALL_PERSON_DATA',\n            operationType: 'READ',\n          },\n        },\n      };\n\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['personId'],\n        operationType: 'READ',\n        // optional values\n        parentOperationDescriptorId: 'FETCH_ALL_PERSON_DATA',\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationStep: ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION,\n        asyncOperationKey: 'FETCH_PERSON_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { personId: 111 },\n      });\n\n      expect(asyncOperation).to.be.an('object');\n      expect(asyncOperation).to.deep.include({\n        lastFetchStatusTime: '2018-10-01T19:13:52.189Z',\n        lastDataStatusTime: '2018-10-01T19:13:56.189Z',\n      });\n      expect(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData');\n    });\n\n    it('should return a successful asyncOperation with parentAsyncOperation metaData two levels deep', () => {\n      state = {\n        operations: {\n          FETCH_PERSON_DATA_111: {\n            descriptorId: 'FETCH_PERSON_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-09-01T19:12:46.189Z',\n            lastDataStatusTime: '2018-09-01T19:12:53.189Z',\n            personId: 111,\n          },\n          FETCH_ALL_PERSON_DATA_FOR_ORG_22: {\n            descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-09-21T19:13:52.189Z',\n            lastDataStatusTime: '2018-09-21T19:13:56.189Z',\n            orgId: 22,\n          },\n          FETCH_ALL_DATA_FOR_ORG_22: {\n            descriptorId: 'FETCH_ALL_DATA_FOR_ORG',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-10-01T19:16:52.189Z',\n            lastDataStatusTime: '2018-10-01T19:23:56.189Z',\n            orgId: 22,\n          },\n        },\n        descriptors: {\n          FETCH_ALL_PERSON_DATA_FOR_ORG: {\n            descriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',\n            requiredParams: ['orgId'],\n            operationType: 'READ',\n            parentOperationDescriptorId: 'FETCH_ALL_DATA_FOR_ORG',\n          },\n          FETCH_ALL_DATA_FOR_ORG: {\n            descriptorId: 'FETCH_ALL_DATA_FOR_ORG',\n            requiredParams: ['orgId'],\n            operationType: 'READ',\n          },\n        },\n      };\n\n\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_PERSON_DATA',\n        requiredParams: ['orgId', 'personId'],\n        operationType: 'READ',\n        parentOperationDescriptorId: 'FETCH_ALL_PERSON_DATA_FOR_ORG',\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationStep: ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION,\n        asyncOperationKey: 'FETCH_PERSON_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { personId: 111, orgId: 22 },\n      });\n\n      expect(asyncOperation).to.be.an('object');\n      expect(asyncOperation).to.deep.include({\n        lastFetchStatusTime: '2018-10-01T19:16:52.189Z',\n        lastDataStatusTime: '2018-10-01T19:23:56.189Z',\n      });\n      expect(asyncOperation).to.matchSnapshot('well formed successful asyncOperation with parentAsyncOperation metaData two levels deep');\n    });\n\n    it('should invalidate an async operation if an invalidatingAsyncOperation shares the same descriptorId', () => {\n      state = {\n        operations: {\n          FETCH_APPOINTMENT_DATA_111: {\n            descriptorId: 'FETCH_APPOINTMENT_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-09-01T19:12:46.189Z',\n            lastDataStatusTime: '2018-09-01T19:12:53.189Z',\n            appointmentId: 111,\n          },\n          FETCH_APPOINTMENT_DATA_222: {\n            descriptorId: 'FETCH_APPOINTMENT_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-09-21T19:13:52.189Z',\n            lastDataStatusTime: '2018-09-21T19:13:56.189Z',\n            appointmentId: 222,\n          },\n        },\n        descriptors: {\n          FETCH_APPOINTMENT_DATA: {\n            descriptorId: 'FETCH_APPOINTMENT_DATA',\n            requiredParams: ['appointmentId'],\n            operationType: 'READ',\n            invalidatingOperationsDescriptorIds: ['FETCH_APPOINTMENT_DATA'],\n          },\n        },\n      };\n\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_APPOINTMENT_DATA',\n        requiredParams: ['appointmentId'],\n        operationType: 'READ',\n        invalidatingOperationsDescriptorIds: ['FETCH_APPOINTMENT_DATA'],\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationStep: ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION,\n        asyncOperationKey: 'FETCH_APPOINTMENT_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { appointmentId: 111 },\n      });\n\n      expect(asyncOperation).to.be.an('object');\n      expect(asyncOperation).to.deep.include({\n        lastFetchStatusTime: 0,\n        lastDataStatusTime: 0,\n      });\n      expect(asyncOperation).to.matchSnapshot('well formed initial read async operation');\n    });\n\n    it('should invalidate async operation if an invalidatingAsyncOperation is a write async operation and has a fetchStatus timestamp after async operation fetchStatus timestamp', () => {\n      state = {\n        operations: {\n          FETCH_CALENDAR_DATA_33: {\n            descriptorId: 'FETCH_CALENDAR_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            dataStatus: 'PRESENT',\n            message: null,\n            lastFetchStatusTime: '2018-09-01T19:12:46.189Z',\n            lastDataStatusTime: '2018-09-01T19:12:53.189Z',\n            orgId: 33,\n          },\n          UPDATE_APPOINTMENT_DATA_222: {\n            descriptorId: 'UPDATE_APPOINTMENT_DATA',\n            fetchStatus: 'SUCCESSFUL',\n            message: null,\n            lastFetchStatusTime: '2018-09-21T19:13:52.189Z',\n            appointmentId: 222,\n          },\n        },\n        descriptors: {\n          UPDATE_APPOINTMENT_DATA: {\n            descriptorId: 'UPDATE_APPOINTMENT_DATA',\n            requiredParams: ['appointmentId'],\n            operationType: 'WRITE',\n          },\n          FETCH_CALENDAR_DATA: {\n            descriptorId: 'FETCH_CALENDAR_DATA',\n            requiredParams: ['orgId'],\n            operationType: 'READ',\n            invalidatingOperationsDescriptorIds: ['FETCH_APPOINTMENT_DATA'],\n          },\n        },\n      };\n\n      const asyncOperationDescriptor = {\n        descriptorId: 'FETCH_CALENDAR_DATA',\n        requiredParams: ['orgId'],\n        operationType: 'READ',\n        invalidatingOperationsDescriptorIds: ['UPDATE_APPOINTMENT_DATA'],\n      };\n\n      const asyncOperation = asyncOperationStateUtils.getAsyncOperation({\n        state,\n        asyncOperationStep: ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION,\n        asyncOperationKey: 'FETCH_APPOINTMENT_DATA_111',\n        asyncOperationDescriptor,\n        asyncOperationParams: { orgId: 33 },\n      });\n\n      expect(asyncOperation).to.be.an('object');\n      expect(asyncOperation).to.deep.include({\n        lastFetchStatusTime: 0,\n        lastDataStatusTime: 0,\n      });\n      expect(asyncOperation).to.matchSnapshot('well formed initial read asyncOperation');\n    });\n  });\n});\n"],"file":"asyncOperationStateUtils_test.js"}