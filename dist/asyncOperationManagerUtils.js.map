{"version":3,"sources":["../src/asyncOperationManagerUtils.js"],"names":["getAsyncOperationsManagerState","asyncOperationManagerState","getState","clearAsyncOperationsManagerState","clearState","setAsyncOperationsManagerState","setState","registerAsyncOperationDescriptors","asyncOperationDescriptors","newState","state","config","asyncOperationManagerConfig","getConfig","otherDescriptors","logger","exceptionsCallback","Error","acc","asyncOperationDescriptor","asyncOperationStateUtils","updateAsyncOperationDescriptor","invalidateAsyncOperationByKey","asyncOperationKey","descriptorId","setInvalidatedOperationByKeyState","getAsyncOperation","params","otherFields","descriptors","asyncOperationParams","getAsyncOperationFromState","fieldsToAdd","shouldRunOperation","asyncOperation","operationType","ASYNC_OPERATION_TYPES","READ","fetchStatus","FETCH_STATUS","NULL","Date","now","lastFetchStatusTime","minCacheTime","readStepLookup","ASYNC_OPERATION_STEPS","BEGIN_ASYNC_OPERATION","RESOLVE_ASYNC_OPERATION","REJECT_ASYNC_OPERATION","writeStepLookup","transformTypeLookup","asyncOperationStep","WRITE","getStateForOperationAfterStep","asyncOperationToTranform","newAsyncOperation","updateAsyncOperation"],"mappings":"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","sourcesContent":["// TODO: JSDocify every function\n\n// \n// This file contains the 'switchboard' logic to coordinate the various\n// lower-level functions that update state. These functions are exposed\n// to the consumer of the library.\n//\n\nimport {\n  isArray,\n  isEmpty,\n  reduce,\n} from 'lodash';\n\nimport asyncOperationStateUtils from './asyncOperationStateUtils';\nimport asyncOperationManagerConfig from './config';\nimport { asyncOperationManagerState } from './asyncOperationManagerState';\n\nimport {\n  beginReadAsyncOperation,\n  beginWriteAsyncOperation,\n  resolveReadAsyncOperation,\n  resolveWriteAsyncOperation,\n  rejectReadAsyncOperation,\n  rejectWriteAsyncOperation,\n} from './asyncOperationUtils';\n\nimport {\n  getAsyncOperationInfo,\n} from './helpers';\n\nimport {\n  ASYNC_OPERATION_TYPES,\n  ASYNC_OPERATION_STEPS,\n  FETCH_STATUS,\n} from './constants';\n\nconst getAsyncOperationsManagerState = asyncOperationManagerState.getState;\nconst clearAsyncOperationsManagerState = asyncOperationManagerState.clearState;\nconst setAsyncOperationsManagerState = asyncOperationManagerState.setState;\n\nconst registerAsyncOperationDescriptors = (asyncOperationDescriptors, ...otherDescriptors) => {\n  let newState;\n  const state = getAsyncOperationsManagerState();\n  const config = asyncOperationManagerConfig.getConfig();\n\n  if (!isEmpty(otherDescriptors)) {\n    config.logger.exceptionsCallback(`\n      You provided more than one argument to registerAsyncOperationDescriptors.\n      You likely forgot to put multiple descriptors within an array`, new Error());\n  }\n  // handle array or single object arguments\n  if (isArray(asyncOperationDescriptors)) {\n    newState = reduce(asyncOperationDescriptors, (acc, asyncOperationDescriptor) => {\n      return asyncOperationStateUtils.updateAsyncOperationDescriptor(acc, asyncOperationDescriptor);\n    }, state);\n  } else {\n    newState = asyncOperationStateUtils.updateAsyncOperationDescriptor(state, asyncOperationDescriptors);\n  }\n\n  return asyncOperationManagerState.setState(newState);\n};\n\nconst invalidateAsyncOperationByKey = (asyncOperationKey, descriptorId) => {\n  const state = getAsyncOperationsManagerState();\n  const newState = asyncOperationStateUtils.setInvalidatedOperationByKeyState(state, asyncOperationKey, descriptorId);\n  return asyncOperationManagerState.setState(newState);\n};\n\nconst getAsyncOperation = ({\n  state,\n  descriptorId,\n  params,\n  otherFields,\n}) => {\n  const {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    asyncOperationKey,\n  } = getAsyncOperationInfo(state.descriptors, descriptorId, params);\n\n  // in case operation/descriptor state is initialized in userland we pass that through\n  // to the library state.\n  const newState = asyncOperationManagerState.setState(state);\n\n  return asyncOperationStateUtils.getAsyncOperationFromState({\n    state: newState,\n    asyncOperationKey,\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    fieldsToAdd: otherFields,\n  });\n};\n\nconst shouldRunOperation = (descriptorId, params) => {\n  const state = asyncOperationManagerState.getState();\n\n  const {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n  } = getAsyncOperationInfo(state.descriptors, descriptorId, params);\n\n  const asyncOperation = getAsyncOperation({\n    state,\n    descriptorId,\n    asyncOperationParams,\n  });\n\n  if (asyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ && asyncOperation.fetchStatus !== FETCH_STATUS.NULL) {\n    return (Date.now() - asyncOperation.lastFetchStatusTime) >= asyncOperationDescriptor.minCacheTime;\n  }\n\n  return true;\n};\n\n// switchboard for resolving the Read operation steps\nconst readStepLookup = {\n  [ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams, otherFields) => beginReadAsyncOperation(asyncOperation, asyncOperationParams, otherFields),\n  [ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams, otherFields) => resolveReadAsyncOperation(asyncOperation, asyncOperationParams, otherFields),\n  [ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams, otherFields) => rejectReadAsyncOperation(asyncOperation, asyncOperationParams, otherFields),\n};\n\n// switchboard for resolving Write operation steps\nconst writeStepLookup = {\n  [ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams, otherFields) => beginWriteAsyncOperation(asyncOperation, asyncOperationParams, otherFields),\n  [ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams, otherFields) => resolveWriteAsyncOperation(asyncOperation, asyncOperationParams, otherFields),\n  [ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams, otherFields) => rejectWriteAsyncOperation(asyncOperation, asyncOperationParams, otherFields),\n};\n\n// first switchboard to transform an async operation\nconst transformTypeLookup = {\n  [ASYNC_OPERATION_TYPES.READ]:\n    (asyncOperation, asyncOperationStep, asyncOperationParams, otherFields) => readStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams, otherFields),\n  [ASYNC_OPERATION_TYPES.WRITE]:\n    (asyncOperation, asyncOperationStep, asyncOperationParams, otherFields) => writeStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams, otherFields),\n};\n\n// this function is called in the reducer (in redux integration)\nconst getStateForOperationAfterStep = (state, asyncOperationStep, descriptorId, params) => {\n  let newState = asyncOperationManagerState.setState(state);\n\n  const {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    asyncOperationKey,\n    otherFields,\n  } = getAsyncOperationInfo(newState.descriptors, descriptorId, params);\n\n  // in case operation/descriptor state is initialized in userland we pass that through\n  // to the library state.\n\n  const asyncOperationToTranform = getAsyncOperation({\n    state: newState,\n    descriptorId,\n    params: asyncOperationParams,\n    otherFields,\n  });\n\n  const newAsyncOperation = transformTypeLookup[asyncOperationDescriptor.operationType](asyncOperationToTranform, asyncOperationStep, asyncOperationParams, otherFields);\n\n  newState = asyncOperationStateUtils.updateAsyncOperation(newState, asyncOperationKey, newAsyncOperation, asyncOperationDescriptor);\n  return asyncOperationManagerState.setState(newState);\n};\n\nexport {\n  getAsyncOperationsManagerState,\n  clearAsyncOperationsManagerState,\n  setAsyncOperationsManagerState,\n\n  getAsyncOperation,\n  invalidateAsyncOperationByKey,\n  registerAsyncOperationDescriptors,\n  getStateForOperationAfterStep,\n\n  shouldRunOperation,\n};\n"],"file":"asyncOperationManagerUtils.js"}