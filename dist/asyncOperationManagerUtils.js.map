{"version":3,"sources":["../src/asyncOperationManagerUtils.js"],"names":["getAsyncOperationsManagerState","asyncOperationManagerState","getState","clearAsyncOperationsManagerState","clearState","setAsyncOperationsManagerState","setState","registerAsyncOperationDescriptors","asyncOperationDescriptors","newState","state","config","asyncOperationManagerConfig","getConfig","otherDescriptors","logger","exceptionsCallback","Error","acc","asyncOperationDescriptor","asyncOperationStateUtils","updateAsyncOperationDescriptor","invalidateAsyncOperation","descriptorId","params","createInvalidatedOperationState","getAsyncOperation","otherFields","descriptors","asyncOperationParams","asyncOperationKey","getAsyncOperationFromState","fieldsToAdd","shouldRunOperation","asyncOperation","operationType","ASYNC_OPERATION_TYPES","READ","fetchStatus","FETCH_STATUS","NULL","Date","now","lastFetchStatusTime","minCacheTime","readStepLookup","ASYNC_OPERATION_STEPS","BEGIN_ASYNC_OPERATION","RESOLVE_ASYNC_OPERATION","REJECT_ASYNC_OPERATION","writeStepLookup","transformTypeLookup","asyncOperationStep","WRITE","getStateForOperationAfterStep","onBegin","onResolve","onReject","asyncOperationToTranform","newAsyncOperation","updateAsyncOperation"],"mappings":"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","sourcesContent":["// TODO: JSDocify every function\n\n// \n// This file contains the 'switchboard' logic to coordinate the various\n// lower-level functions that update state. These functions are exposed\n// to the consumer of the library.\n//\n\nimport {\n  isArray,\n  isEmpty,\n  reduce,\n  has,\n} from 'lodash';\n\nimport asyncOperationStateUtils from './asyncOperationStateUtils';\nimport asyncOperationManagerConfig from './config';\nimport { asyncOperationManagerState } from './asyncOperationManagerState';\n\nimport {\n  beginReadAsyncOperation,\n  beginWriteAsyncOperation,\n  resolveReadAsyncOperation,\n  resolveWriteAsyncOperation,\n  rejectReadAsyncOperation,\n  rejectWriteAsyncOperation,\n} from './asyncOperationUtils';\n\nimport {\n  getAsyncOperationInfo,\n} from './helpers';\n\nimport {\n  ASYNC_OPERATION_TYPES,\n  ASYNC_OPERATION_STEPS,\n  FETCH_STATUS,\n} from './constants';\n\nconst getAsyncOperationsManagerState = asyncOperationManagerState.getState;\nconst clearAsyncOperationsManagerState = asyncOperationManagerState.clearState;\nconst setAsyncOperationsManagerState = asyncOperationManagerState.setState;\n\nconst registerAsyncOperationDescriptors = (asyncOperationDescriptors, ...otherDescriptors) => {\n  let newState;\n  const state = getAsyncOperationsManagerState();\n  const config = asyncOperationManagerConfig.getConfig();\n\n  if (!isEmpty(otherDescriptors)) {\n    config.logger.exceptionsCallback(`\n      You provided more than one argument to registerAsyncOperationDescriptors.\n      You likely forgot to put multiple descriptors within an array`, new Error());\n  }\n  // handle array or single object arguments\n  if (isArray(asyncOperationDescriptors)) {\n    newState = reduce(asyncOperationDescriptors, (acc, asyncOperationDescriptor) => {\n      return asyncOperationStateUtils.updateAsyncOperationDescriptor(acc, asyncOperationDescriptor);\n    }, state);\n  } else {\n    newState = asyncOperationStateUtils.updateAsyncOperationDescriptor(state, asyncOperationDescriptors);\n  }\n\n  return asyncOperationManagerState.setState(newState);\n};\n\nconst invalidateAsyncOperation = (descriptorId, params) => {\n  const state = getAsyncOperationsManagerState();\n  const newState = asyncOperationStateUtils.createInvalidatedOperationState(state, descriptorId, params);\n  return asyncOperationManagerState.setState(newState);\n};\n\nconst getAsyncOperation = (\n  state,\n  descriptorId,\n  params,\n  otherFields,\n) => {\n  const {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    asyncOperationKey,\n  } = getAsyncOperationInfo(state.descriptors, descriptorId, params);\n\n  // in case operation/descriptor state is initialized in userland we pass that through\n  // to the library state.\n  const newState = asyncOperationManagerState.setState(state);\n\n  return asyncOperationStateUtils.getAsyncOperationFromState({\n    state: newState,\n    asyncOperationKey,\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    fieldsToAdd: otherFields,\n  });\n};\n\nconst shouldRunOperation = (descriptorId, params) => {\n  const state = asyncOperationManagerState.getState();\n\n  const {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n  } = getAsyncOperationInfo(state.descriptors, descriptorId, params);\n\n  const asyncOperation = getAsyncOperation(\n    state,\n    descriptorId,\n    asyncOperationParams,\n  );\n\n  if (asyncOperationDescriptor.operationType === ASYNC_OPERATION_TYPES.READ && asyncOperation.fetchStatus !== FETCH_STATUS.NULL) {\n    return (Date.now() - asyncOperation.lastFetchStatusTime) >= asyncOperationDescriptor.minCacheTime;\n  }\n\n  return true;\n};\n\n// switchboard for resolving the Read operation steps\nconst readStepLookup = {\n  [ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams) => beginReadAsyncOperation(asyncOperation, asyncOperationParams),\n  [ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams) => resolveReadAsyncOperation(asyncOperation, asyncOperationParams),\n  [ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams) => rejectReadAsyncOperation(asyncOperation, asyncOperationParams),\n};\n\n// switchboard for resolving Write operation steps\nconst writeStepLookup = {\n  [ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams) => beginWriteAsyncOperation(asyncOperation, asyncOperationParams),\n  [ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams) => resolveWriteAsyncOperation(asyncOperation, asyncOperationParams),\n  [ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION]:\n    (asyncOperation, asyncOperationParams) => rejectWriteAsyncOperation(asyncOperation, asyncOperationParams),\n};\n\n// first switchboard to transform an async operation\nconst transformTypeLookup = {\n  [ASYNC_OPERATION_TYPES.READ]:\n    (asyncOperation, asyncOperationStep, asyncOperationParams) => readStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams),\n  [ASYNC_OPERATION_TYPES.WRITE]:\n    (asyncOperation, asyncOperationStep, asyncOperationParams) => writeStepLookup[asyncOperationStep](asyncOperation, asyncOperationParams),\n};\n\n// this function is called in the reducer (in redux integration)\nconst getStateForOperationAfterStep = (state, asyncOperationStep, descriptorId, params) => {\n  // in case operation/descriptor state is initialized in userland we pass that through\n  // to the library state.\n  let newState = setAsyncOperationsManagerState(state);\n\n  const {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    otherFields,\n  } = getAsyncOperationInfo(newState.descriptors, descriptorId, params);\n\n  // descriptor asyncOperationStep callbacks\n  switch (asyncOperationStep) {\n    case ASYNC_OPERATION_STEPS.BEGIN_ASYNC_OPERATION:\n      if (asyncOperationDescriptor.onBegin) {\n        asyncOperationDescriptor.onBegin(asyncOperationParams);\n      }\n      break;\n    case ASYNC_OPERATION_STEPS.RESOLVE_ASYNC_OPERATION:\n      if (asyncOperationDescriptor.onResolve) {\n        asyncOperationDescriptor.onResolve(asyncOperationParams);\n      }\n      break;\n    case ASYNC_OPERATION_STEPS.REJECT_ASYNC_OPERATION:\n      if (asyncOperationDescriptor.onReject) {\n        asyncOperationDescriptor.onReject(asyncOperationParams);\n      }\n      break;\n    default:\n      break;\n  }\n\n  // If any of the asyncOperationStep callbacks changed the state we want to grab the latest state\n  newState = getAsyncOperationsManagerState();\n\n  const asyncOperationToTranform = getAsyncOperation(\n    newState,\n    descriptorId,\n    asyncOperationParams,\n    otherFields,\n  );\n\n  const newAsyncOperation = transformTypeLookup[asyncOperationDescriptor.operationType](asyncOperationToTranform, asyncOperationStep, asyncOperationParams);\n\n  newState = asyncOperationStateUtils.updateAsyncOperation({\n    state: newState,\n    asyncOperation: newAsyncOperation,\n    params: asyncOperationParams,\n    descriptorId,\n  });\n\n  return asyncOperationManagerState.setState(newState);\n};\n\nexport {\n  getAsyncOperationsManagerState,\n  clearAsyncOperationsManagerState,\n  setAsyncOperationsManagerState,\n\n  getAsyncOperation,\n  invalidateAsyncOperation,\n  registerAsyncOperationDescriptors,\n  getStateForOperationAfterStep,\n\n  shouldRunOperation,\n};\n"],"file":"asyncOperationManagerUtils.js"}