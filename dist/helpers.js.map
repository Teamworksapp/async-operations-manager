{"version":3,"sources":["../src/helpers.js"],"names":["makeConstantsObject","sourceValues","extraOverrides","Object","freeze","generateAsyncOperationKey","descriptorId","params","config","asyncOperationManagerConfig","getConfig","baseAsyncOperationKey","logger","exceptionsCallback","sortedParamValues","map","entry","sort","join","getAndValidateParams","paramsToCheck","asyncOperationDescriptor","asyncOperationParams","requiredParams","optionalParams","has","paramValue","keys","getAsyncOperationDescriptor","asyncOperationDescriptors","warningsCallback","debug","verboseLoggingCallback","infoLoggingCallback","getAsyncOperationInfo","descriptors","asyncOperationKey","otherFields"],"mappings":"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","sourcesContent":["// TODO: JSDocify every function\n\nimport {\n  assign,\n  every,\n  keyBy,\n  has,\n  isArray,\n  isEmpty,\n  isString,\n  isUndefined,\n  partial,\n  pick,\n  omit,\n  some,\n  values\n} from \"lodash\";\n\nimport asyncOperationManagerConfig from \"./config\";\n\nconst makeConstantsObject = (sourceValues = [], extraOverrides = {}) =>\n  Object.freeze(\n    // The keyBy create our keys-and-values object, then we manipulate it and freeze it.s\n    assign(keyBy(sourceValues), extraOverrides)\n  );\n\nconst generateAsyncOperationKey = (descriptorId, params = {}) => {\n  const config = asyncOperationManagerConfig.getConfig();\n  let baseAsyncOperationKey = descriptorId;\n  if (!descriptorId || !isString(descriptorId)) {\n    config.logger.exceptionsCallback(\n      \"A descriptorId string to create the async operation key was not provided\"\n    );\n  }\n\n  if (!isEmpty(params)) {\n    let sortedParamValues = values(params);\n\n    sortedParamValues = sortedParamValues.map(entry => {\n      if (isArray(entry)) {\n        return [...entry].sort();\n      }\n\n      return entry;\n    });\n\n    sortedParamValues.sort();\n    baseAsyncOperationKey = `${baseAsyncOperationKey}_${sortedParamValues.join(\n      \"_\"\n    )}`;\n  }\n\n  return baseAsyncOperationKey;\n};\n\nconst getAndValidateParams = (paramsToCheck, asyncOperationDescriptor) => {\n  // Pick out designated required and optional params exclusively.\n  const asyncOperationParams = {\n    ...(asyncOperationDescriptor.requiredParams\n      ? pick(paramsToCheck, asyncOperationDescriptor.requiredParams)\n      : {}),\n    ...(asyncOperationDescriptor.optionalParams\n      ? pick(paramsToCheck, asyncOperationDescriptor.optionalParams)\n      : {})\n  };\n\n  const { logger } = asyncOperationManagerConfig.getConfig();\n  if (asyncOperationDescriptor.requiredParams) {\n    // make sure that every requiredParams is included in the asyncOperationParams object and that\n    // none of the values are undefined\n    if (\n      !every(\n        asyncOperationDescriptor.requiredParams,\n        partial(has, asyncOperationParams)\n      ) ||\n      (asyncOperationParams &&\n        some(asyncOperationParams, paramValue => isUndefined(paramValue)))\n    ) {\n      // This warning is here just to catch typos\n      logger.exceptionsCallback(`\n        It looks like ${\n          asyncOperationDescriptor.descriptorId\n        } is missing a param/requiredParams.\n        requiredParams provided: : ${Object.keys(asyncOperationParams)}\n        requiredParams: : ${asyncOperationDescriptor.requiredParams}\n      `);\n    }\n  }\n\n  return asyncOperationParams;\n};\n\nconst getAsyncOperationDescriptor = (\n  asyncOperationDescriptors,\n  descriptorId\n) => {\n  const config = asyncOperationManagerConfig.getConfig();\n  const asyncOperationDescriptor = asyncOperationDescriptors[descriptorId];\n\n  if (!asyncOperationDescriptor) {\n    config.logger.warningsCallback(\n      `descriptorId \"${descriptorId}\" does not match with any registered async operation descriptor`\n    );\n    return null;\n  }\n\n  if (asyncOperationDescriptor.debug) {\n    config.logger.verboseLoggingCallback(\n      `Inside getAsyncOperationDescriptor for ${descriptorId}`\n    );\n    config.logger.infoLoggingCallback(\n      \"getAsyncOperationDescriptor [Data Snapshot]:\",\n      {\n        asyncOperationDescriptors,\n        asyncOperationDescriptor\n      }\n    );\n  }\n\n  return asyncOperationDescriptor;\n};\n\nconst getAsyncOperationInfo = (descriptors, descriptorId, params) => {\n  const asyncOperationDescriptor = getAsyncOperationDescriptor(\n    descriptors,\n    descriptorId\n  );\n  const asyncOperationParams = getAndValidateParams(\n    params,\n    asyncOperationDescriptor\n  );\n  const asyncOperationKey = generateAsyncOperationKey(\n    descriptorId,\n    asyncOperationParams\n  );\n  const otherFields = omit(params, asyncOperationDescriptor.requiredParams);\n\n  return {\n    asyncOperationDescriptor,\n    asyncOperationParams,\n    asyncOperationKey,\n    otherFields\n  };\n};\n\nexport {\n  makeConstantsObject,\n  generateAsyncOperationKey,\n  getAndValidateParams,\n  getAsyncOperationInfo,\n  getAsyncOperationDescriptor\n};\n"],"file":"helpers.js"}